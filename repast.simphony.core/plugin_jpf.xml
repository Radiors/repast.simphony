<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE plugin PUBLIC "-//JPF//Java Plug-in Manifest 0.6" "http://jpf.sourceforge.net/plugin_0_6.dtd">
<plugin id="repast.simphony.core" version="">
	<attributes>
         <attribute id="simphony" value="2.0.1"/>
     </attributes>
	
  <requires>
    <!-- for GISContext
      <import plugin-id="repast.simphony.geotools"/>
      -->
    <import exported="false" match="compatible" optional="false" plugin-id="saf.core.runtime" reverse-lookup="false"/>
  </requires>


  <runtime>
    <library id="rsc" path="bin/" type="code">
      <export prefix="*"/>
    </library>

    <!-- this is very important as it makes the model code available to dependent plugins
      <library id="rsc.models" path="../repast.simphony.test.models/repast.simphony.test.models.jar" type="code">
        <export prefix="*"/>
      </library>
      -->

    <!--
      <library type="resources" path="icons/" id="icons"/>
      <library type="resources" path="help/" id="help"/>
      -->
    <library id="cglib-nodep-2.1" path="lib/cglib-nodep-2.1_3.jar" type="code">
      <export prefix="*"/>
    </library>

    <library id="jscience" path="lib/jscience.jar" type="code">
      <export prefix="*"/>
    </library>

    <library id="collections-generic-4.01" path="lib/collections-generic-4.01.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="colt" path="lib/colt-1.2.0-no_hep.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="commons-collections-3.2" path="lib/commons-collections-3.2.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="commons-lang-2.1" path="lib/commons-lang-2.1.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="velocity-1.4" path="lib/velocity-1.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="opencsv" path="lib/opencsv-1.5.jar" type="code">
      <export prefix="*"/>
    </library>

    <library id="poi" path="lib/poi-3.6-20091214.jar" type="code">
      <export prefix="*"/>
    </library>

    <!-- geotools libs -->
    <library id="gt-api-2.7.4.jar" path="lib/gt-api-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-brewer-2.7.4.jar" path="lib/gt-brewer-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-coverage-2.7.4.jar" path="lib/gt-coverage-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-cql-2.7.4.jar" path="lib/gt-cql-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-data-2.7.4.jar" path="lib/gt-data-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-epsg-hsql-2.7.4" path="lib/gt-epsg-hsql-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-main-2.7.4.jar" path="lib/gt-main-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-metadata-2.7.4.jar" path="lib/gt-metadata-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-opengis-2.7.4.jar" path="lib/gt-opengis-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-referencing-2.7.4.jar" path="lib/gt-referencing-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
   <library id="gt-render-2.7.4.jar" path="lib/gt-render-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="gt-shapefile-2.7.4.jar" path="lib/gt-shapefile-2.7.4.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="jts-1.11.jar" path="lib/jts-1.11.jar" type="code">
      <export prefix="*"/>
    </library>
    <library id="hsqldb-1.8.0.7" path="lib/hsqldb-1.8.0.7.jar" type="code">
      <export prefix="*"/>
    </library>
    
    <!-- this is used by geotools when reading and writing shapefiles -->
    <library id="concurrent-1.3.4" path="lib/concurrent-1.3.4.jar" type="code">
      <export prefix="*"/>
    </library>

    <library id="jung-api" path="lib/jung-api-2.0.1.jar" type="code"/>
    <library id="jung-graph" path="lib/jung-graph-impl-2.0.1.jar" type="code"/>
    <library id="jung-algorithms" path="lib/jung-algorithms-2.0.1.jar" type="code"/>
	<library id="jung-io" path="lib/jung-io-2.0.1.jar" type="code"/>

    <library id="jooneeditor" path="lib/joone-editor.jar" type="code"/>
    <library id="jooneengine" path="lib/joone-engine.jar" type="code"/>
    <library id="jgap" path="lib/jgap.jar" type="code"/>
    <library id="OpenForecast" path="lib/OpenForecast-0.4.0.jar" type="code"/>
    <library id="ProActive" path="lib/ProActive.jar" type="code"/>
		<library id="JBullet" path="lib/jbullet.jar" type="code"/>

  </runtime>

  <!-- defines a parent / composite action. This action will become a child of the
    root action. The creator class must implement
    the repast.simphony.plugin.CompositeControllerActionCreator interface.
   -->
  <extension-point extension-multiplicity="any" id="composite.action">
    <parameter-def id="creatorClass" multiplicity="one" type="string"/>
  </extension-point>

  <!-- defines how a child / component action is saved and loaded. actionIO must implement
    repast.simphony.scenario.ControllerActionIO.
   -->
  <extension-point extension-multiplicity="any" id="component.action">
    <parameter-def id="actionIO" multiplicity="one" type="string"/>
    <parameter-def id="parentID" multiplicity="one" type="string"/>
  </extension-point>

</plugin>
