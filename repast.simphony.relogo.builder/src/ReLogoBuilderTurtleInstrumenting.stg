

turtleHatchTypesMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Makes a number of new <lowerPlural> and then executes a set of commands on the
	 * created <lowerPlural>.
	 * 
	 * @param number
	 *            a number
	 * @param closure
	 *            a set of commands
	 * @return created <lowerPlural>
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> hatch<capPlural>(int number, Closure closure) {
	return this.hatch(number,closure,"<lowerPlural>");
}

	/**
	 * Makes a number of new <lowerPlural> and then executes a set of commands on the
	 * created <lowerPlural>.
	 * 
	 * @param number
	 *            a number
	 * @param closure
	 *            a set of commands
	 * @return created <lowerPlural>
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> hatch<capPlural>(int number) {
	return hatch<capPlural>(number,null);
}
>>

turtlePatchTypesHereMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns an agentset of <lowerPlural> from the patch of the caller.
	 * 
	 * @return agentset of <lowerPlural> from the caller's patch
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> <lowerPlural>Here(){
  Grid grid = getMyObserver().getGrid();
  GridPoint gridPoint = grid.getLocation(this);
  AgentSet\<<fullyQualifiedName>\> result = new AgentSet\<<fullyQualifiedName>\>();
  for (Turtle t : Utility.getTurtlesOnGridPoint(gridPoint,getMyObserver(),"<lowerSingular>")){
		if (t instanceof <fullyQualifiedName>)
		result.add((<fullyQualifiedName>)t);
	}
	return result;
}
>>

turtlePatchTypesAtMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns the agentset of <lowerPlural> on the patch at the direction (ndx, ndy) from the
	 * caller.
	 * 
	 * @param nX
	 *            a number
	 * @param nY
	 *            a number
	 * @returns agentset of <lowerPlural> at the direction (nX, nY) from the caller
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> <lowerPlural>At(Number nX, Number nY){
	double dx = nX.doubleValue();
	double dy = nY.doubleValue();
	double[] displacement = {dx,dy};
	
	try{
	GridPoint gridPoint = Utility.getGridPointAtDisplacement(getTurtleLocation(),displacement,getMyObserver());
	AgentSet\<<fullyQualifiedName>\> result = new AgentSet\<<fullyQualifiedName>\>();						
	for (Turtle t : Utility.getTurtlesOnGridPoint(gridPoint,getMyObserver(),"<lowerSingular>")){
		if (t instanceof <fullyQualifiedName>)
		result.add((<fullyQualifiedName>)t);
	}
	return result;
	}
	catch(SpatialException e){
		return new AgentSet\<<fullyQualifiedName>\>();
	}
}
>>