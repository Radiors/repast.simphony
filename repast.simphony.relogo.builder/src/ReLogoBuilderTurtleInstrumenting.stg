

turtleHatchTypesMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Makes a number of new <lowerPlural> and then executes a set of commands on the
	 * created <lowerPlural>.
	 * 
	 * @param number
	 *            a number
	 * @param closure
	 *            a set of commands
	 * @return created <lowerPlural>
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> hatch<capPlural>(int number, Closure closure) {
	return this.hatch(number,closure,"<lowerPlural>");
}

	/**
	 * Makes a number of new <lowerPlural> and then executes a set of commands on the
	 * created <lowerPlural>.
	 * 
	 * @param number
	 *            a number
	 * @param closure
	 *            a set of commands
	 * @return created <lowerPlural>
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> hatch<capPlural>(int number) {
	return hatch<capPlural>(number,null);
}
>>

turtlePatchTypesHereMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns an agentset of <lowerPlural> from the patch of the caller.
	 * 
	 * @return agentset of <lowerPlural> from the caller's patch
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> <lowerPlural>Here(){
  Grid grid = getMyObserver().getGrid();
  GridPoint gridPoint = grid.getLocation(this);
  AgentSet\<<fullyQualifiedName>\> result = new AgentSet\<<fullyQualifiedName>\>();
  for (Turtle t : Utility.getTurtlesOnGridPoint(gridPoint,getMyObserver(),"<lowerSingular>")){
		if (t instanceof <fullyQualifiedName>)
		result.add((<fullyQualifiedName>)t);
	}
	return result;
}
>>

turtlePatchTypesAtMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns the agentset of <lowerPlural> on the patch at the direction (ndx, ndy) from the
	 * caller.
	 * 
	 * @param nX
	 *            a number
	 * @param nY
	 *            a number
	 * @returns agentset of <lowerPlural> at the direction (nX, nY) from the caller
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> <lowerPlural>At(Number nX, Number nY){
	double dx = nX.doubleValue();
	double dy = nY.doubleValue();
	double[] displacement = {dx,dy};
	
	try{
	GridPoint gridPoint = Utility.getGridPointAtDisplacement(getTurtleLocation(),displacement,getMyObserver());
	AgentSet\<<fullyQualifiedName>\> result = new AgentSet\<<fullyQualifiedName>\>();						
	for (Turtle t : Utility.getTurtlesOnGridPoint(gridPoint,getMyObserver(),"<lowerSingular>")){
		if (t instanceof <fullyQualifiedName>)
		result.add((<fullyQualifiedName>)t);
	}
	return result;
	}
	catch(SpatialException e){
		return new AgentSet\<<fullyQualifiedName>\>();
	}
}
>>

tplTypesOnPMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns an agentset of <lowerPlural> on a given patch.
	 * 
	 * @param p
	 *            a patch
	 * @return agentset of <lowerPlural> on patch p
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> <lowerPlural>On(Patch p){
	AgentSet\<<fullyQualifiedName>\> result = new AgentSet\<<fullyQualifiedName>\>();						
	for (Turtle t : Utility.getTurtlesOnGridPoint(p.getGridLocation(),getMyObserver(),"<lowerSingular>")){
		if (t instanceof <fullyQualifiedName>)
		result.add((<fullyQualifiedName>)t);
	}
	return result;
}
>>

tplTypesOnTMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns an agentset of <lowerPlural> on the same patch as a turtle.
	 * 
	 * @param t
	 *            a turtle
	 * @return agentset of <lowerPlural> on the same patch as turtle t
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> <lowerPlural>On(Turtle t){
	AgentSet\<<fullyQualifiedName>\> result = new AgentSet\<<fullyQualifiedName>\>();						
	for (Turtle tt : Utility.getTurtlesOnGridPoint(Utility.ndPointToGridPoint(t.getTurtleLocation()),getMyObserver(),"<lowerSingular>")){
		if (tt instanceof <fullyQualifiedName>)
		result.add((<fullyQualifiedName>)tt);
	}
	return result;
}
>>

tplTypesOnCMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns an agentset of <lowerPlural> on the patches in a collection or on the patches
	 * that a collection of turtles are.
	 * 
	 * @param a
	 *            a collection
	 * @return agentset of <lowerPlural> on the patches in collection a or on the patches
	 *         that collection a turtles are
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> <lowerPlural>On(Collection c){

	if (c == null || c.isEmpty()){
		return new AgentSet\<<fullyQualifiedName>\>();
	}
	
	Set\<<fullyQualifiedName>\> total = new HashSet\<<fullyQualifiedName>\>();
	if (c.iterator().next() instanceof Turtle){
		for (Object o : c){
			if (o instanceof Turtle){
				Turtle t = (Turtle) o;
				total.addAll(<lowerPlural>On(t));
			}
		}
	}
	else {
		for (Object o : c){
			if (o instanceof Patch){
				Patch p = (Patch) o;
				total.addAll(<lowerPlural>On(p));
			}
		}
	}
	return new AgentSet\<<fullyQualifiedName>\>(total);
}
>>

tplIsTypeQMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Checks if an object is a <lowerSingular>.
	 * 
	 * @param o
	 *            o object
	 * @return true if object o is a <lowerSingular>, false otherwise
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public boolean is<capSingular>Q(Object o){
	return o instanceof <fullyQualifiedName>;
}
>>

tplTypesMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns an agentset containing all <lowerPlural>.
	 * 
	 * @return agentset of all <lowerPlural>
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public AgentSet\<<fullyQualifiedName>\> <lowerPlural>(){
	AgentSet\<<fullyQualifiedName>\> result = new AgentSet\<<fullyQualifiedName>\>();
	for(Object o : Utility.getTurtleAgentSetOfType("<lowerPlural>",this.getMyObserver())){
		if (o instanceof <fullyQualifiedName>)
			result.add((<fullyQualifiedName>)o);
	} 
	return result;
}
>>

tplTypeMethod(fullyQualifiedName,lowerSingular,capSingular,lowerPlural,capPlural) ::= <<

	/**
	 * Returns the <lowerSingular> with the given who number.
	 * 
	 * @param number
	 *            a number
	 * @return turtle number
	 */
@ReLogoBuilderGeneratedFor("<fullyQualifiedName>")
public <fullyQualifiedName> <lowerSingular>(Number number){
	Turtle turtle = Utility.turtleU(number.intValue(), getMyObserver());
	if (turtle instanceof <fullyQualifiedName>)
		return (<fullyQualifiedName>) turtle;
	return null;
}
>>

patchGetterField(patchType,fieldName,capFieldName,fieldType,patchGetter,patchSetter) ::= <<

	/**
	 * Returns the value of the <fieldName> variable of the underlying patch.
	 * 
	 * @return <fieldName> of type <fieldType>
	 */
@ReLogoBuilderGeneratedFor("<patchType>")
public <fieldType> get<capFieldName>(){
	<patchType> p = (<patchType>)patchHere();
	return p.<fieldName>;
}

>>

patchGetterGetter(patchType,fieldName,capFieldName,fieldType,patchGetter,patchSetter) ::= <<

	/**
	 * Returns the value from the <patchGetter>() method of the underlying patch.
	 * 
	 * @return <fieldName> of type <fieldType>
	 */
@ReLogoBuilderGeneratedFor("<patchType>")
public <fieldType> get<capFieldName>(){
	<patchType> p = (<patchType>)patchHere();
	return p.<patchGetter>();
}
>>

patchSetterField(patchType,fieldName,capFieldName,fieldType,patchGetter,patchSetter) ::= <<

	/**
	 * Sets the value of <fieldName> of the underlying patch.
	 * 
	 */
@ReLogoBuilderGeneratedFor("<patchType>")
public void set<capFieldName>(<fieldType> value){
	<patchType> p = (<patchType>)patchHere();
	p.<fieldName> = value;
}
>>

patchSetterSetter(patchType,fieldName,capFieldName,fieldType,patchGetter,patchSetter) ::= <<

	/**
	 * Calls the <patchSetter>(<fieldType>) method of the underlying patch.
	 * 
	 */
@ReLogoBuilderGeneratedFor("<patchType>")
public void set<capFieldName>(<fieldType> value){
	<patchType> p = (<patchType>)patchHere();
	p.<patchSetter>(value);
}
>>
