/**
 */
package repast.simphony.statecharts.scmodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import repast.simphony.statecharts.scmodel.util.StatechartAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StatechartItemProviderAdapterFactory extends StatechartAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatechartItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.StateMachine} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateMachineItemProvider stateMachineItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.StateMachine}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStateMachineAdapter() {
    if (stateMachineItemProvider == null) {
      stateMachineItemProvider = new StateMachineItemProvider(this);
    }

    return stateMachineItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.State} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateItemProvider stateItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.State}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStateAdapter() {
    if (stateItemProvider == null) {
      stateItemProvider = new StateItemProvider(this);
    }

    return stateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.FinalState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FinalStateItemProvider finalStateItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.FinalState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFinalStateAdapter() {
    if (finalStateItemProvider == null) {
      finalStateItemProvider = new FinalStateItemProvider(this);
    }

    return finalStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.Transition} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransitionItemProvider transitionItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.Transition}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransitionAdapter() {
    if (transitionItemProvider == null) {
      transitionItemProvider = new TransitionItemProvider(this);
    }

    return transitionItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.CompositeState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompositeStateItemProvider compositeStateItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.CompositeState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCompositeStateAdapter() {
    if (compositeStateItemProvider == null) {
      compositeStateItemProvider = new CompositeStateItemProvider(this);
    }

    return compositeStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.PseudoState} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PseudoStateItemProvider pseudoStateItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.PseudoState}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPseudoStateAdapter() {
    if (pseudoStateItemProvider == null) {
      pseudoStateItemProvider = new PseudoStateItemProvider(this);
    }

    return pseudoStateItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.History} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HistoryItemProvider historyItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.History}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHistoryAdapter() {
    if (historyItemProvider == null) {
      historyItemProvider = new HistoryItemProvider(this);
    }

    return historyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.DefaultTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DefaultTriggerItemProvider defaultTriggerItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.DefaultTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDefaultTriggerAdapter() {
    if (defaultTriggerItemProvider == null) {
      defaultTriggerItemProvider = new DefaultTriggerItemProvider(this);
    }

    return defaultTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.ProbabilityTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProbabilityTriggerItemProvider probabilityTriggerItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.ProbabilityTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProbabilityTriggerAdapter() {
    if (probabilityTriggerItemProvider == null) {
      probabilityTriggerItemProvider = new ProbabilityTriggerItemProvider(this);
    }

    return probabilityTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.ConditionTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionTriggerItemProvider conditionTriggerItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.ConditionTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConditionTriggerAdapter() {
    if (conditionTriggerItemProvider == null) {
      conditionTriggerItemProvider = new ConditionTriggerItemProvider(this);
    }

    return conditionTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.MessageTrigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MessageTriggerItemProvider messageTriggerItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.MessageTrigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMessageTriggerAdapter() {
    if (messageTriggerItemProvider == null) {
      messageTriggerItemProvider = new MessageTriggerItemProvider(this);
    }

    return messageTriggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.MessageChecker} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MessageCheckerItemProvider messageCheckerItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.MessageChecker}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMessageCheckerAdapter() {
    if (messageCheckerItemProvider == null) {
      messageCheckerItemProvider = new MessageCheckerItemProvider(this);
    }

    return messageCheckerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.ConditionChecker} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionCheckerItemProvider conditionCheckerItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.ConditionChecker}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createConditionCheckerAdapter() {
    if (conditionCheckerItemProvider == null) {
      conditionCheckerItemProvider = new ConditionCheckerItemProvider(this);
    }

    return conditionCheckerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.EqualsChecker} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EqualsCheckerItemProvider equalsCheckerItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.EqualsChecker}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEqualsCheckerAdapter() {
    if (equalsCheckerItemProvider == null) {
      equalsCheckerItemProvider = new EqualsCheckerItemProvider(this);
    }

    return equalsCheckerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link repast.simphony.statecharts.scmodel.Action} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionItemProvider actionItemProvider;

  /**
   * This creates an adapter for a {@link repast.simphony.statecharts.scmodel.Action}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createActionAdapter() {
    if (actionItemProvider == null) {
      actionItemProvider = new ActionItemProvider(this);
    }

    return actionItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose() {
    if (stateMachineItemProvider != null) stateMachineItemProvider.dispose();
    if (stateItemProvider != null) stateItemProvider.dispose();
    if (finalStateItemProvider != null) finalStateItemProvider.dispose();
    if (transitionItemProvider != null) transitionItemProvider.dispose();
    if (compositeStateItemProvider != null) compositeStateItemProvider.dispose();
    if (pseudoStateItemProvider != null) pseudoStateItemProvider.dispose();
    if (historyItemProvider != null) historyItemProvider.dispose();
    if (defaultTriggerItemProvider != null) defaultTriggerItemProvider.dispose();
    if (probabilityTriggerItemProvider != null) probabilityTriggerItemProvider.dispose();
    if (conditionTriggerItemProvider != null) conditionTriggerItemProvider.dispose();
    if (messageTriggerItemProvider != null) messageTriggerItemProvider.dispose();
    if (messageCheckerItemProvider != null) messageCheckerItemProvider.dispose();
    if (conditionCheckerItemProvider != null) conditionCheckerItemProvider.dispose();
    if (equalsCheckerItemProvider != null) equalsCheckerItemProvider.dispose();
    if (actionItemProvider != null) actionItemProvider.dispose();
  }

}
